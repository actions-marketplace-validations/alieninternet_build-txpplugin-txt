# =============================================================================
# build-txpplugin-txt - Build Textpattern plugin as a TXT package GitHub action
# =============================================================================
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# Metadata:
# @author     Ashley Butcher
# @copyright  Copyright (c) 2024 Alien Internet Services
# @license    https://www.gnu.org/licenses/gpl-3.0.html GNU General Public License version 3
# @version    v1
# @link	      https://github.com/alieninternet/build-txpplugin-txt
# =============================================================================

name: Build Textpattern Plugin TXT Package
description: >
  Downloads and executes the Textpattern plugin packager to produce a plugin package.
  Optionally, it can add the resulting files (the TXT package and its SHA256 checksum)
  to the release that triggered the workflow.

inputs:
  folder:
    description: >
      Folder containing the plugin files (should include manifest.json).
      
      If not provided, it is assumed the plugin file is in the current working directory. If you haven't changed directory before calling this action, that would be the root of your repository.
    required: false
    default: '.'
  package_filename:
    description: >
      Optional package filename.
      
      If not provided, the action will read manifest.json from the specified plugin source folder and construct a filename as <plugin name>_v<version>.txt, with dots in the version replaced by underscores.
    required: false
  github_token:
    description: >
      This option defaults to the repository scoped GitHub Token.
      
      If you need more permissions for things such as deploying to another repository, you can add a Personal Access Token (PAT) here.
      
      [Learn more about creating and secrets here.](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)
    required: false
    default: ${{ github.token }}
  release_files:
    description: >
      If set to "true", automatically add the generated files to the release. 
    required: false
    default: 'false'

outputs:
  output_file:
    description: 'The generated package filename'

runs:
  using: "composite"
  steps:
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.0'

    - name: Determine Latest v0.x Packager Release
      id: get_release
      run: |
        # List all releases, filter those starting with "v0.", sort by publish date and select the latest.
        RELEASE=$(gh api repos/alieninternet/ais_txpplugin_packager/releases \
          | jq -r 'map(select(.tag_name | startswith("v0."))) | sort_by(.published_at) | last')
        echo "$RELEASE" > release.json
        PHAR_URL=$(jq -r '.assets[] | select(.name | endswith(".phar")) | .browser_download_url' release.json)
        CHECKSUM_URL=$(jq -r '.assets[] | select(.name | endswith(".sha256")) | .browser_download_url' release.json)
        echo "PHAR_URL=$PHAR_URL" >> $GITHUB_ENV
        echo "CHECKSUM_URL=$CHECKSUM_URL" >> $GITHUB_ENV
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github_token }}

    - name: Generate Temporary Filenames
      id: gen_uuid
      run: |
        UUID=$(uuidgen)
        PHAR_FILE="ais_txpplugin_package_${UUID}.phar"
        CHECKSUM_FILE="ais_txpplugin_package_${UUID}.phar.sha256"
        echo "PHAR_FILE=${PHAR_FILE}" >> $GITHUB_ENV
        echo "CHECKSUM_FILE=${CHECKSUM_FILE}" >> $GITHUB_ENV
      shell: bash

    - name: Download Packager PHAR and Checksum
      run: |
        curl -L -o "${{ env.PHAR_FILE }}" "$PHAR_URL"
        curl -L -o "${{ env.CHECKSUM_FILE }}" "$CHECKSUM_URL"
      shell: bash

    # Package integrity must be done manually as we have downloaded the PHAR with a different filename to mitigate clobbering files
    - name: Verify Packager Integrity
      run: |
        computed_checksum=$(sha256sum "${{ env.PHAR_FILE }}" | awk '{print $1}')
        expected_checksum=$(awk '{print $1}' "${{ env.CHECKSUM_FILE }}")
        echo "Computed checksum: $computed_checksum"
        echo "Expected checksum: $expected_checksum"
        if [ "$computed_checksum" != "$expected_checksum" ]; then
          echo "PHAR checksum verification failed"
          exit 1
        else
          echo "PHAR checksum OK"
        fi
      shell: bash

    - name: Make Packager Executable
      run: chmod +x "${{ env.PHAR_FILE }}"
      shell: bash

    # Default package name if missing, using repository name + version string from manifest.json
    - name: Determine Package Filename
      id: determine_filename
      run: |
        if [ -n "${{ inputs.package_filename }}" ]; then
          OUTPUT_FILE="${{ inputs.package_filename }}"
        else
          PLUGIN_NAME=$(basename "${GITHUB_REPOSITORY}")
          VERSION=$(jq -r '.version' "${{ inputs.folder }}/manifest.json" | sed 's/\./_/g')
          OUTPUT_FILE="${PLUGIN_NAME}_v${VERSION}.txt"
        fi
        echo "OUTPUT_FILE=${OUTPUT_FILE}" >> $GITHUB_ENV
        echo "output_file=${OUTPUT_FILE}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Run Plugin Packager
      run: |
        ./"${{ env.PHAR_FILE }}" "${{ inputs.folder }}" "${{ env.OUTPUT_FILE }}"
      shell: bash

    - name: Generate Package Checksum File
      run: |
        sha256sum "${{ env.OUTPUT_FILE }}" > "${{ env.OUTPUT_FILE }}.sha256sum"
      shell: bash

    - name: Upload Release Assets
      if: ${{ inputs.release_files == 'true' }}
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        files: |
          ${{ env.OUTPUT_FILE }}
          ${{ env.OUTPUT_FILE }}.sha256sum
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
